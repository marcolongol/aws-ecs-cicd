---
name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check commit status
        id: check_commit_status
        run: |
          # Check the status of the Git commit
          CURRENT_STATUS=$(curl --url https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/status --header "Authorization: Bearer ${{ github.token }}" --silent | jq -r '.state')
          echo "Current status: $CURRENT_STATUS"
          while [[ "$CURRENT_STATUS" != "success" ]]; do
            sleep 10
            CURRENT_STATUS=$(curl --url https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/status --header "Authorization: Bearer ${{ github.token }}" --silent | jq -r '.state')
            echo "Current status: $CURRENT_STATUS"
            if [[ "$CURRENT_STATUS" == "failure" ]]; then
              echo "Commit status is failure. Exiting..."
              exit 1
            fi
          done

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
          cache: "npm"

      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: |
          npm ci
          poetry install

      - name: Deploy CDK
        run: |
          npx nx run infra:deploy --verbose

      - name: Build and push Docker image
        id: build
        run: |
          npx nx run webapp:container --verbose
        env:
          INPUT_GITHUB_TOKEN: ${{ github.token }}

      - name: Retrieve Image URI
        id: image_uri
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aws-ecs-cicd-repo
        run: |
          echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:sha-$(git rev-parse --short ${{ github.sha }})"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task_def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: aws-ecs-cicd-container
          image: ${{ steps.image_uri.outputs.image_uri }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task_def.outputs.task-definition }}
          service: aws-ecs-cicd-service
          cluster: aws-ecs-cicd-cluster
          wait-for-service-stability: true
